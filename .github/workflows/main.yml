---
name: 'Deploy'

on:
  workflow_dispatch:
    inputs:
      env_name: #https://github.community/t/can-workflow-dispatch-input-be-option-list/127338/2 no options list yet
        type: string
        description: 'Environment name (possible values are: tz, tz2, tz3, tz4, sz, prod)'
        required: true
        default: tz
      skip_deploy:
        type: string
        description: 'Pin image tag only (yes/no)'
        required: false
        default: "no"
      is_revert:
        type: string
        description: 'Revert action (yes/no)'
        required: true
        default: "no"

env:
  IMAGE_NAME: figleaf-api
  MIGRATION_IMAGE_NAME: figleaf-api-migrate

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      migrate_sg: ${{ steps.set_migrate_sg.outputs.migrate_sg }}
      migrate_sn: ${{ steps.set_migrate_sn.outputs.migrate_sn }}
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
      prev_image_tag: ${{ steps.set_prev_image_tag.outputs.prev_image_tag }}
      api_service: ${{ steps.set_api_service.outputs.api_service }}
      email_masking_service: ${{ steps.set_email_masking_service.outputs.email_masking }}
      ns_service: ${{ steps.set_ns_service.outputs.ns }}
      vault_service: ${{ steps.set_vault_service.outputs.vault }}
      kv_service: ${{ steps.set_kv_service.outputs.kv }}
      migration_task: ${{ steps.set_migration_task.outputs.migration_task }}
      prev_image_hash: ${{ steps.save_previous_image_hash.outputs.prev_image_hash }}

    steps:
      - name: Set api_service variable
        id: set_api_service
        run: |
          case ${{ github.event.inputs.env_name }} in
          tz2)
            echo "set::output name=api_service::Api2"
            ;;
          tz3)
            echo "set::output name=api_service::Api3"
            ;;
          tz4)
            echo "set::output name=api_service::Api4"
            ;;
          *)
            echo "set::output name=api_service::Api"
            ;;
          esac

      - name: Set email_masking variable
        id: set_email_masking_service
        run: |
          case ${{ github.event.inputs.env_name }} in
          tz2)
            echo "set::output name=email_masking::EmailMasking2"
            ;;
          tz3)
            echo "set::output name=email_masking::EmailMasking3"
            ;;
          tz4)
            echo "set::output name=email_masking::EmailMasking4"
            ;;
          *)
            echo "set::output name=email_masking::EmailMasking"
            ;;
          esac

      - name: Set notification service name variable
        id: set_ns_service
        run: |
          case ${{ github.event.inputs.env_name }} in
          tz2)
            echo "set::output name=ns::Notification2"
            ;;
          tz3)
            echo "set::output name=ns::Notification3"
            ;;
          tz4)
            echo "set::output name=ns::Notification4"
            ;;
          *)
            echo "set::output name=ns::Notification"
            ;;
          esac

      - name: Set vault service name variable
        id: set_vault_service
        run: |
          case ${{ github.event.inputs.env_name }} in
          tz2)
            echo "set::output name=vault::Vault2"
            ;;
          tz3)
            echo "set::output name=vault::Vault3"
            ;;
          tz4)
            echo "set::output name=vault::Vault4"
            ;;
          *)
            echo "set::output name=vault::Vault"
            ;;
          esac

      - name: Set kv service name variable
        id: set_kv_service
        run: |
          case ${{ github.event.inputs.env_name }} in
          tz2)
            echo "set::output name=kv::KVStorage2"
            ;;
          tz3)
            echo "set::output name=kv::KVStorage3"
            ;;
          tz4)
            echo "set::output name=kv::KVStorage4"
            ;;
          *)
            echo "set::output name=kv::KVStorage"
            ;;
          esac

      - name: Set migration task name variable
        id: set_migration_task
        run: |
          case ${{ github.event.inputs.env_name }} in
          tz2)
            echo "set::output name=migration_task::PrivacyApiMigration2"
            ;;
          tz3)
            echo "set::output name=migration_task::PrivacyApiMigration3"
            ;;
          tz4)
            echo "set::output name=migration_task::PrivacyApiMigration4"
            ;;
          *)
            echo "set::output name=migration_task::PrivacyApiMigration"
            ;;
          esac

      - name: Set migrate_sg variable
        id: set_migrate_sg
        run: |
          case ${{ github.event.inputs.env_name }} in
          prod)
            echo "set::output name=migrate_sg::sg-01807502c0cab25e6"
            ;;
          sz)
            echo "set::output name=migrate_sg::sg-0598509f6e73766fe"
            ;;
          tz)
            echo "set::output name=migrate_sg::sg-084a790985b851efe"
            ;;
          *)
            echo "set::output name=migrate_sg::sg-084a790985b851efe"
            ;;
          esac

      - name: Set migrate_sn variable
        id: set_migrate_sn
        run: |
          case ${{ github.event.inputs.env_name }} in
          prod)
            echo "set::output name=migrate_sn::subnet-00d96e660f3ae20f9,subnet-04192c2d8532f2182"
            ;;
          sz)
            echo "set::output name=migrate_sn::subnet-0741b5d355e7de1b8,subnet-0e9f1d3c23dbe716f"
            ;;
          *)
            echo "set::output name=migrate_sn::subnet-06a9e39fbb766aefe,subnet-0ef7204022307b0d4"
            ;;
          esac

      - name: Set image_tag variable
        id: set_image_tag
        run: |
          case ${{ github.event.inputs.env_name }} in
          prod)
            echo "set::output name=image_tag::stable"
            ;;
          sz)
            echo "set::output name=image_tag::latest"
            ;;
          tz)
            echo "set::output name=image_tag::test"
            ;;
          tz2)
            echo "set::output name=image_tag::test2"
            ;;
          tz3)
            echo "set::output name=image_tag::test3"
            ;;
          tz4)
            echo "set::output name=image_tag::test4"
            ;;
          esac

      - name: Set prev_image_tag variable
        id: set_prev_image_tag
        run: |
          case ${{ github.event.inputs.env_name }} in
          prod)
            echo "set::output name=prev_image_tag::prev-stable"
            ;;
          sz)
            echo "set::output name=prev_image_tag::prev-latest"
            ;;
          tz)
            echo "set::output name=prev_image_tag::prev-test"
            ;;
          tz2)
            echo "set::output name=prev_image_tag::prev-test2"
            ;;
          tz3)
            echo "set::output name=prev_image_tag::prev-test3"
            ;;
          tz4)
            echo "set::output name=prev_image_tag::prev-test4"
            ;;
          esac
          echo "${{steps.set_image_tag.outputs.image_tag}}"

      - name: Check the environment correctness input for ${{github.event.inputs.env_name}}
        if: ${{ !steps.set_image_tag.outputs.image_tag }}
        run: exit 1

      - name: Configure AWS credentials from ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Save previous image
        id: save_previous_image_hash
        env:
          PREV_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ steps.set_prev_image_tag.outputs.prev_image_tag }}
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest
        run: |
          if docker pull $PREV_IMAGE; then
            PREV_IMAGE_HASH=$(docker image inspect --format='{{.ContainerConfig.Image}}' $PREV_IMAGE)
            echo "set::output name=prev_image_hash::$PREV_IMAGE_HASH"
          else
            docker pull $IMAGE
            PREV_IMAGE_HASH=$(docker image inspect --format='{{.ContainerConfig.Image}}
            echo "set::output name=prev_image_hash::$PREV_IMAGE_HASH"
          fi

      - name: Pin last api images
        env:
          API_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:git-sha-${{ github.sha }}
          ENV_API_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ steps.set_image_tag.outputs.image_tag }}
        if: ${{ github.event.inputs.is_revert == 'no' && (github.event.inputs.env_name != 'prod' || github.ref == 'refs/heads/master') }}
        run: |
          docker pull $API_IMAGE
          docker tag $API_IMAGE $ENV_API_IMAGE
          docker push $ENV_API_IMAGE

      - name: Pin previous api images as latest
        env:
          LATEST_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ steps.set_image_tag.outputs.image_tag }}
          PREV_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ steps.set_prev_image_tag.outputs.prev_image_tag }}
        if: ${{ github.event.inputs.is_revert == 'yes' && (github.event.inputs.env_name != 'prod' || github.ref == 'refs/heads/master') }}
        run: |
          docker pull $PREV_IMAGE
          docker tag $PREV_IMAGE $LATEST_IMAGE
          docker push $LATEST_IMAGE

      - name: Pin last migration images
        env:
          MIGRATION_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.MIGRATION_IMAGE_NAME }}:git-sha-${{ github.sha }}
          ENV_MIGRATION_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.MIGRATION_IMAGE_NAME }}:${{ steps.set_image_tag.outputs.image_tag }}
        if: ${{ github.event.inputs.env_name != 'prod' || github.ref == 'refs/heads/master' }}
        run: |
          docker pull $MIGRATION_IMAGE
          docker tag $MIGRATION_IMAGE $ENV_MIGRATION_IMAGE
          docker push $ENV_MIGRATION_IMAGE

      - name: Configure AWS credentials from TEST
        if: startsWith(github.event.inputs.env_name, 'tz')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure AWS credentials from STAGE
        if: ${{ github.event.inputs.env_name == 'sz' && github.event.inputs.skip_deploy != 'yes' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure AWS credentials from PROD
        if: ${{ github.event.inputs.env_name == 'prod' && github.event.inputs.skip_deploy != 'yes' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run migrations
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        env:
          NETCFG: "awsvpcConfiguration={subnets=[${{ env.MIGRATE_SN }}],securityGroups=[${{ env.MIGRATE_SG }}],assignPublicIp=DISABLED}"
        run: |
          MIGRATE_ARN=`aws ecs run-task --cluster PrivacyApp --count 1 --launch-type FARGATE --task-definition $MIGRATION_TASK --network-configuration $NETCFG | jq -r '.tasks[0].taskArn'`
          aws ecs wait tasks-stopped --cluster PrivacyApp --tasks $MIGRATE_ARN
          RC=`aws ecs describe-tasks --cluster PrivacyApp --tasks $MIGRATE_ARN --query "tasks[0].containers[0].exitCode"`
          exit $RC

      - name: Deploy api service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ steps.set_api_service.outputs.api_service }} --force-new-deployment

      - name: Deploy emailmasking service ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ steps.set_email_masking_service.outputs.email_masking_service }} --force-new-deployment

      - name: Deploy vault service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ steps.set_vault_service.outputs.vault_service }} --force-new-deployment

      - name: Deploy kv service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ steps.set_kv_service.outputs.kv_service }} --force-new-deployment

      - name: Deploy notification service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ steps.set_ns_service.outputs.ns_service }} --force-new-deployment

      - name: Wait until services will stable on ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs wait services-stable --cluster PrivacyApp --services "${{ steps.set_api_service.outputs.api_service }}" "${{ steps.set_email_masking_service.outputs.email_masking_service }}" "${{ steps.set_vault_service.outputs.vault_service }}" "${{ steps.set_ns_service.outputs.ns_service }}" "${{ steps.set_kv-service.outputs.kv_service }}"

  pin_image:
    needs: deploy
    if: always() && (needs.deploy.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Pin old api image as previous
        env:
          OLD_IMAGE: ${{ needs.deploy.steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ needs.deploy.outputs.prev_image_hash }}
          PREV_IMAGE: ${{ needs.deploy.steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ needs.deploy.outputs.prev_image_tag }}
        if: ${{ github.event.inputs.is_revert == 'no' && (github.event.inputs.env_name != 'prod' || github.ref == 'refs/heads/master') }}
        run: |
          docker pull $OLD_IMAGE
          docker tag $OLD_IMAGE $PREV_IMAGE
          docker push $PREV_IMAGE

  rollback:
    needs: deploy
    if: always() && (needs.deploy.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Pin old api image as latest
        env:
          LATEST_IMAGE: ${{ needs.deploy.steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ needs.deploy.outputs.image_tag }}
          OLD_IMAGE: ${{ needs.deploy.steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ needs.deploy.outputs.prev_image_hash }}
        if: ${{ github.event.inputs.env_name != 'prod' || github.ref == 'refs/heads/master' }}
        run: |
          docker pull $OLD_IMAGE
          docker tag $OLD_IMAGE $LATEST_IMAGE
          docker push $LATEST_IMAGE

      - name: Deploy api service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ needs.deploy.outputs.api_service }} --force-new-deployment

      - name: Deploy emailmasking service ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ needs.deploy.outputs.email_masking_service }} --force-new-deployment

      - name: Deploy vault service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ needs.deploy.outputs.vault_service }} --force-new-deployment

      - name: Deploy kv service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ needs.deploy.outputs.kv_service }} --force-new-deployment

      - name: Deploy notification service to ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs update-service --cluster PrivacyApp --service ${{ needs.deploy.outputs.ns_service }} --force-new-deployment

      - name: Wait until services will stable on ${{github.event.inputs.env_name}}
        if: ${{ github.event.inputs.skip_deploy != 'yes' }}
        run: |
          aws ecs wait services-stable --cluster PrivacyApp --services "${{ needs.deploy.outputs.api_service }}" "${{ needs.deploy.outputs.email_masking_service }}" "${{ needs.deploy.outputs.vault_service }}" "${{ needs.deploy.outputs.ns_service }}" "${{ needs.deploy.outputs.kv_service }}"
